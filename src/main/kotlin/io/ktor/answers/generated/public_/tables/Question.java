/*
 * This file is generated by jOOQ.
 */
package io.ktor.answers.generated.public_.tables;


import io.ktor.answers.generated.public_.Indexes;
import io.ktor.answers.generated.public_.Keys;
import io.ktor.answers.generated.public_.Public;
import io.ktor.answers.generated.public_.tables.records.QuestionRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Question extends TableImpl<QuestionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.question</code>
     */
    public static final Question QUESTION = new Question();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionRecord> getRecordType() {
        return QuestionRecord.class;
    }

    /**
     * The column <code>public.question.id</code>.
     */
    public final TableField<QuestionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.question.content</code>.
     */
    public final TableField<QuestionRecord, Long> CONTENT = createField(DSL.name("content"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.question.title</code>.
     */
    public final TableField<QuestionRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    private Question(Name alias, Table<QuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Question(Name alias, Table<QuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.question</code> table reference
     */
    public Question(String alias) {
        this(DSL.name(alias), QUESTION);
    }

    /**
     * Create an aliased <code>public.question</code> table reference
     */
    public Question(Name alias) {
        this(alias, QUESTION);
    }

    /**
     * Create a <code>public.question</code> table reference
     */
    public Question() {
        this(DSL.name("question"), null);
    }

    public <O extends Record> Question(Table<O> child, ForeignKey<O, QuestionRecord> key) {
        super(child, key, QUESTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.QUESTION_CONTENT);
    }

    @Override
    public Identity<QuestionRecord, Long> getIdentity() {
        return (Identity<QuestionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QuestionRecord> getPrimaryKey() {
        return Keys.QUESTION_PKEY;
    }

    @Override
    public List<UniqueKey<QuestionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.QUESTION_TITLE_UNIQUE);
    }

    @Override
    public List<ForeignKey<QuestionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QUESTION__FK_QUESTION_CONTENT__ID);
    }

    private transient Content _content;

    /**
     * Get the implicit join path to the <code>public.content</code> table.
     */
    public Content content() {
        if (_content == null)
            _content = new Content(this, Keys.QUESTION__FK_QUESTION_CONTENT__ID);

        return _content;
    }

    @Override
    public Question as(String alias) {
        return new Question(DSL.name(alias), this);
    }

    @Override
    public Question as(Name alias) {
        return new Question(alias, this);
    }

    @Override
    public Question as(Table<?> alias) {
        return new Question(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Question rename(String name) {
        return new Question(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Question rename(Name name) {
        return new Question(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Question rename(Table<?> name) {
        return new Question(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
