/*
 * This file is generated by jOOQ.
 */
package io.ktor.answers.generated.public_.tables;


import io.ktor.answers.generated.public_.Indexes;
import io.ktor.answers.generated.public_.Keys;
import io.ktor.answers.generated.public_.Public;
import io.ktor.answers.generated.public_.tables.records.QuestionTagRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionTag extends TableImpl<QuestionTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.question_tag</code>
     */
    public static final QuestionTag QUESTION_TAG = new QuestionTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionTagRecord> getRecordType() {
        return QuestionTagRecord.class;
    }

    /**
     * The column <code>public.question_tag.question_id</code>.
     */
    public final TableField<QuestionTagRecord, Long> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.question_tag.tag_id</code>.
     */
    public final TableField<QuestionTagRecord, Long> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private QuestionTag(Name alias, Table<QuestionTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionTag(Name alias, Table<QuestionTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.question_tag</code> table reference
     */
    public QuestionTag(String alias) {
        this(DSL.name(alias), QUESTION_TAG);
    }

    /**
     * Create an aliased <code>public.question_tag</code> table reference
     */
    public QuestionTag(Name alias) {
        this(alias, QUESTION_TAG);
    }

    /**
     * Create a <code>public.question_tag</code> table reference
     */
    public QuestionTag() {
        this(DSL.name("question_tag"), null);
    }

    public <O extends Record> QuestionTag(Table<O> child, ForeignKey<O, QuestionTagRecord> key) {
        super(child, key, QUESTION_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.QUESTION_TAG_QUESTION_ID, Indexes.QUESTION_TAG_TAG_ID);
    }

    @Override
    public UniqueKey<QuestionTagRecord> getPrimaryKey() {
        return Keys.PK_QUESTION_TAG;
    }

    @Override
    public List<ForeignKey<QuestionTagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QUESTION_TAG__FK_QUESTION_TAG_QUESTION_ID__ID, Keys.QUESTION_TAG__FK_QUESTION_TAG_TAG_ID__ID);
    }

    private transient Question _question;
    private transient Tag _tag;

    /**
     * Get the implicit join path to the <code>public.question</code> table.
     */
    public Question question() {
        if (_question == null)
            _question = new Question(this, Keys.QUESTION_TAG__FK_QUESTION_TAG_QUESTION_ID__ID);

        return _question;
    }

    /**
     * Get the implicit join path to the <code>public.tag</code> table.
     */
    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.QUESTION_TAG__FK_QUESTION_TAG_TAG_ID__ID);

        return _tag;
    }

    @Override
    public QuestionTag as(String alias) {
        return new QuestionTag(DSL.name(alias), this);
    }

    @Override
    public QuestionTag as(Name alias) {
        return new QuestionTag(alias, this);
    }

    @Override
    public QuestionTag as(Table<?> alias) {
        return new QuestionTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTag rename(String name) {
        return new QuestionTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTag rename(Name name) {
        return new QuestionTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTag rename(Table<?> name) {
        return new QuestionTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
