/*
 * This file is generated by jOOQ.
 */
package io.ktor.answers.generated.public_.tables.records;


import io.ktor.answers.generated.public_.tables.Comment;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> implements Record3<Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.comment.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.comment.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.comment.data</code>.
     */
    public void setData(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.comment.data</code>.
     */
    public Long getData() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.comment.parent</code>.
     */
    public void setParent(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.comment.parent</code>.
     */
    public Long getParent() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Comment.COMMENT.ID;
    }

    @Override
    public Field<Long> field2() {
        return Comment.COMMENT.DATA;
    }

    @Override
    public Field<Long> field3() {
        return Comment.COMMENT.PARENT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getData();
    }

    @Override
    public Long component3() {
        return getParent();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getData();
    }

    @Override
    public Long value3() {
        return getParent();
    }

    @Override
    public CommentRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CommentRecord value2(Long value) {
        setData(value);
        return this;
    }

    @Override
    public CommentRecord value3(Long value) {
        setParent(value);
        return this;
    }

    @Override
    public CommentRecord values(Long value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(Long id, Long data, Long parent) {
        super(Comment.COMMENT);

        setId(id);
        setData(data);
        setParent(parent);
        resetChangedOnNotNull();
    }
}
