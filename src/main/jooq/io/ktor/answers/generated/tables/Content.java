/*
 * This file is generated by jOOQ.
 */
package io.ktor.answers.generated.tables;


import io.ktor.answers.generated.Indexes;
import io.ktor.answers.generated.Keys;
import io.ktor.answers.generated.Public;
import io.ktor.answers.generated.tables.records.ContentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Content extends TableImpl<ContentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.content</code>
     */
    public static final Content CONTENT = new Content();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContentRecord> getRecordType() {
        return ContentRecord.class;
    }

    /**
     * The column <code>public.content.id</code>.
     */
    public final TableField<ContentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.content.text</code>.
     */
    public final TableField<ContentRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.content.author_id</code>.
     */
    public final TableField<ContentRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.content.created_at</code>.
     */
    public final TableField<ContentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Content(Name alias, Table<ContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Content(Name alias, Table<ContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.content</code> table reference
     */
    public Content(String alias) {
        this(DSL.name(alias), CONTENT);
    }

    /**
     * Create an aliased <code>public.content</code> table reference
     */
    public Content(Name alias) {
        this(alias, CONTENT);
    }

    /**
     * Create a <code>public.content</code> table reference
     */
    public Content() {
        this(DSL.name("content"), null);
    }

    public <O extends Record> Content(Table<O> child, ForeignKey<O, ContentRecord> key) {
        super(child, key, CONTENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CONTENT_AUTHOR_ID, Indexes.CONTENT_CREATED_AT);
    }

    @Override
    public Identity<ContentRecord, Long> getIdentity() {
        return (Identity<ContentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContentRecord> getPrimaryKey() {
        return Keys.CONTENT_PKEY;
    }

    @Override
    public List<ForeignKey<ContentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTENT__FK_CONTENT_AUTHOR_ID__ID);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.CONTENT__FK_CONTENT_AUTHOR_ID__ID);

        return _users;
    }

    @Override
    public Content as(String alias) {
        return new Content(DSL.name(alias), this);
    }

    @Override
    public Content as(Name alias) {
        return new Content(alias, this);
    }

    @Override
    public Content as(Table<?> alias) {
        return new Content(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Content rename(String name) {
        return new Content(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Content rename(Name name) {
        return new Content(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Content rename(Table<?> name) {
        return new Content(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Long, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
