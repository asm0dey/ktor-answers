/*
 * This file is generated by jOOQ.
 */
package io.ktor.answers.generated.tables;


import io.ktor.answers.generated.Indexes;
import io.ktor.answers.generated.Keys;
import io.ktor.answers.generated.Public;
import io.ktor.answers.generated.tables.records.AnswerRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Answer extends TableImpl<AnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.answer</code>
     */
    public static final Answer ANSWER = new Answer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswerRecord> getRecordType() {
        return AnswerRecord.class;
    }

    /**
     * The column <code>public.answer.id</code>.
     */
    public final TableField<AnswerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.answer.question</code>.
     */
    public final TableField<AnswerRecord, Long> QUESTION = createField(DSL.name("question"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.answer.data</code>.
     */
    public final TableField<AnswerRecord, Long> DATA = createField(DSL.name("data"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.answer.accepted</code>.
     */
    public final TableField<AnswerRecord, Boolean> ACCEPTED = createField(DSL.name("accepted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Answer(Name alias, Table<AnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Answer(Name alias, Table<AnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.answer</code> table reference
     */
    public Answer(String alias) {
        this(DSL.name(alias), ANSWER);
    }

    /**
     * Create an aliased <code>public.answer</code> table reference
     */
    public Answer(Name alias) {
        this(alias, ANSWER);
    }

    /**
     * Create a <code>public.answer</code> table reference
     */
    public Answer() {
        this(DSL.name("answer"), null);
    }

    public <O extends Record> Answer(Table<O> child, ForeignKey<O, AnswerRecord> key) {
        super(child, key, ANSWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ANSWER_QUESTION);
    }

    @Override
    public Identity<AnswerRecord, Long> getIdentity() {
        return (Identity<AnswerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnswerRecord> getPrimaryKey() {
        return Keys.ANSWER_PKEY;
    }

    @Override
    public List<ForeignKey<AnswerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANSWER__FK_ANSWER_QUESTION__ID, Keys.ANSWER__FK_ANSWER_DATA__ID);
    }

    private transient Question _question;
    private transient Content _content;

    /**
     * Get the implicit join path to the <code>public.question</code> table.
     */
    public Question question() {
        if (_question == null)
            _question = new Question(this, Keys.ANSWER__FK_ANSWER_QUESTION__ID);

        return _question;
    }

    /**
     * Get the implicit join path to the <code>public.content</code> table.
     */
    public Content content() {
        if (_content == null)
            _content = new Content(this, Keys.ANSWER__FK_ANSWER_DATA__ID);

        return _content;
    }

    @Override
    public Answer as(String alias) {
        return new Answer(DSL.name(alias), this);
    }

    @Override
    public Answer as(Name alias) {
        return new Answer(alias, this);
    }

    @Override
    public Answer as(Table<?> alias) {
        return new Answer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Answer rename(String name) {
        return new Answer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Answer rename(Name name) {
        return new Answer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Answer rename(Table<?> name) {
        return new Answer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
