/*
 * This file is generated by jOOQ.
 */
package io.ktor.answers.generated;


import io.ktor.answers.generated.tables.Answer;
import io.ktor.answers.generated.tables.Comment;
import io.ktor.answers.generated.tables.Content;
import io.ktor.answers.generated.tables.Question;
import io.ktor.answers.generated.tables.QuestionTag;
import io.ktor.answers.generated.tables.Role;
import io.ktor.answers.generated.tables.Tag;
import io.ktor.answers.generated.tables.UserRole;
import io.ktor.answers.generated.tables.Users;
import io.ktor.answers.generated.tables.Vote;
import io.ktor.answers.generated.tables.records.AnswerRecord;
import io.ktor.answers.generated.tables.records.CommentRecord;
import io.ktor.answers.generated.tables.records.ContentRecord;
import io.ktor.answers.generated.tables.records.QuestionRecord;
import io.ktor.answers.generated.tables.records.QuestionTagRecord;
import io.ktor.answers.generated.tables.records.RoleRecord;
import io.ktor.answers.generated.tables.records.TagRecord;
import io.ktor.answers.generated.tables.records.UserRoleRecord;
import io.ktor.answers.generated.tables.records.UsersRecord;
import io.ktor.answers.generated.tables.records.VoteRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AnswerRecord> ANSWER_PKEY = Internal.createUniqueKey(Answer.ANSWER, DSL.name("answer_pkey"), new TableField[] { Answer.ANSWER.ID }, true);
    public static final UniqueKey<CommentRecord> COMMENT_PKEY = Internal.createUniqueKey(Comment.COMMENT, DSL.name("comment_pkey"), new TableField[] { Comment.COMMENT.ID }, true);
    public static final UniqueKey<ContentRecord> CONTENT_PKEY = Internal.createUniqueKey(Content.CONTENT, DSL.name("content_pkey"), new TableField[] { Content.CONTENT.ID }, true);
    public static final UniqueKey<QuestionRecord> QUESTION_PKEY = Internal.createUniqueKey(Question.QUESTION, DSL.name("question_pkey"), new TableField[] { Question.QUESTION.ID }, true);
    public static final UniqueKey<QuestionRecord> QUESTION_TITLE_UNIQUE = Internal.createUniqueKey(Question.QUESTION, DSL.name("question_title_unique"), new TableField[] { Question.QUESTION.TITLE }, true);
    public static final UniqueKey<QuestionTagRecord> PK_QUESTION_TAG = Internal.createUniqueKey(QuestionTag.QUESTION_TAG, DSL.name("pk_question_tag"), new TableField[] { QuestionTag.QUESTION_TAG.QUESTION_ID, QuestionTag.QUESTION_TAG.TAG_ID }, true);
    public static final UniqueKey<RoleRecord> ROLE_NAME_UNIQUE = Internal.createUniqueKey(Role.ROLE, DSL.name("role_name_unique"), new TableField[] { Role.ROLE.NAME }, true);
    public static final UniqueKey<RoleRecord> ROLE_PKEY = Internal.createUniqueKey(Role.ROLE, DSL.name("role_pkey"), new TableField[] { Role.ROLE.ID }, true);
    public static final UniqueKey<TagRecord> TAG_NAME_UNIQUE = Internal.createUniqueKey(Tag.TAG, DSL.name("tag_name_unique"), new TableField[] { Tag.TAG.NAME }, true);
    public static final UniqueKey<TagRecord> TAG_PKEY = Internal.createUniqueKey(Tag.TAG, DSL.name("tag_pkey"), new TableField[] { Tag.TAG.ID }, true);
    public static final UniqueKey<UserRoleRecord> PK_USER_ROLE = Internal.createUniqueKey(UserRole.USER_ROLE, DSL.name("pk_user_role"), new TableField[] { UserRole.USER_ROLE.USER, UserRole.USER_ROLE.ROLE }, true);
    public static final UniqueKey<UsersRecord> USERS_DISPLAY_NAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_display_name_key"), new TableField[] { Users.USERS.DISPLAY_NAME }, true);
    public static final UniqueKey<UsersRecord> USERS_EMAIL_UNIQUE = Internal.createUniqueKey(Users.USERS, DSL.name("users_email_unique"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> USERS_NAME_UNIQUE = Internal.createUniqueKey(Users.USERS, DSL.name("users_name_unique"), new TableField[] { Users.USERS.NAME }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<VoteRecord> VOTE_PKEY = Internal.createUniqueKey(Vote.VOTE, DSL.name("vote_pkey"), new TableField[] { Vote.VOTE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AnswerRecord, ContentRecord> ANSWER__FK_ANSWER_DATA__ID = Internal.createForeignKey(Answer.ANSWER, DSL.name("fk_answer_data__id"), new TableField[] { Answer.ANSWER.DATA }, Keys.CONTENT_PKEY, new TableField[] { Content.CONTENT.ID }, true);
    public static final ForeignKey<AnswerRecord, QuestionRecord> ANSWER__FK_ANSWER_QUESTION__ID = Internal.createForeignKey(Answer.ANSWER, DSL.name("fk_answer_question__id"), new TableField[] { Answer.ANSWER.QUESTION }, Keys.QUESTION_PKEY, new TableField[] { Question.QUESTION.ID }, true);
    public static final ForeignKey<CommentRecord, ContentRecord> COMMENT__FK_COMMENT_DATA__ID = Internal.createForeignKey(Comment.COMMENT, DSL.name("fk_comment_data__id"), new TableField[] { Comment.COMMENT.DATA }, Keys.CONTENT_PKEY, new TableField[] { Content.CONTENT.ID }, true);
    public static final ForeignKey<CommentRecord, ContentRecord> COMMENT__FK_COMMENT_PARENT__ID = Internal.createForeignKey(Comment.COMMENT, DSL.name("fk_comment_parent__id"), new TableField[] { Comment.COMMENT.PARENT }, Keys.CONTENT_PKEY, new TableField[] { Content.CONTENT.ID }, true);
    public static final ForeignKey<ContentRecord, UsersRecord> CONTENT__FK_CONTENT_AUTHOR_ID__ID = Internal.createForeignKey(Content.CONTENT, DSL.name("fk_content_author_id__id"), new TableField[] { Content.CONTENT.AUTHOR_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<QuestionRecord, ContentRecord> QUESTION__FK_QUESTION_CONTENT__ID = Internal.createForeignKey(Question.QUESTION, DSL.name("fk_question_content__id"), new TableField[] { Question.QUESTION.CONTENT }, Keys.CONTENT_PKEY, new TableField[] { Content.CONTENT.ID }, true);
    public static final ForeignKey<QuestionTagRecord, QuestionRecord> QUESTION_TAG__FK_QUESTION_TAG_QUESTION_ID__ID = Internal.createForeignKey(QuestionTag.QUESTION_TAG, DSL.name("fk_question_tag_question_id__id"), new TableField[] { QuestionTag.QUESTION_TAG.QUESTION_ID }, Keys.QUESTION_PKEY, new TableField[] { Question.QUESTION.ID }, true);
    public static final ForeignKey<QuestionTagRecord, TagRecord> QUESTION_TAG__FK_QUESTION_TAG_TAG_ID__ID = Internal.createForeignKey(QuestionTag.QUESTION_TAG, DSL.name("fk_question_tag_tag_id__id"), new TableField[] { QuestionTag.QUESTION_TAG.TAG_ID }, Keys.TAG_PKEY, new TableField[] { Tag.TAG.ID }, true);
    public static final ForeignKey<UserRoleRecord, RoleRecord> USER_ROLE__FK_USER_ROLE_ROLE__ID = Internal.createForeignKey(UserRole.USER_ROLE, DSL.name("fk_user_role_role__id"), new TableField[] { UserRole.USER_ROLE.ROLE }, Keys.ROLE_PKEY, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<UserRoleRecord, UsersRecord> USER_ROLE__FK_USER_ROLE_USER__ID = Internal.createForeignKey(UserRole.USER_ROLE, DSL.name("fk_user_role_user__id"), new TableField[] { UserRole.USER_ROLE.USER }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<VoteRecord, ContentRecord> VOTE__FK_VOTE_CONTENT__ID = Internal.createForeignKey(Vote.VOTE, DSL.name("fk_vote_content__id"), new TableField[] { Vote.VOTE.CONTENT }, Keys.CONTENT_PKEY, new TableField[] { Content.CONTENT.ID }, true);
    public static final ForeignKey<VoteRecord, UsersRecord> VOTE__FK_VOTE_VOTER__ID = Internal.createForeignKey(Vote.VOTE, DSL.name("fk_vote_voter__id"), new TableField[] { Vote.VOTE.VOTER }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
}
